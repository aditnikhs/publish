package id.soewidiatmaka.gamelanjv

import android.Manifest
import android.annotation.SuppressLint
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.graphics.drawable.AnimationDrawable
import android.media.MediaRecorder
import android.media.SoundPool
import android.os.Build
import android.os.Bundle
import android.os.CountDownTimer
import android.os.Environment
import android.view.MotionEvent
import android.view.View
import android.widget.*
import androidx.activity.OnBackPressedCallback
import androidx.annotation.RequiresApi
import androidx.appcompat.app.AppCompatActivity
import androidx.constraintlayout.widget.ConstraintLayout
import androidx.core.app.ActivityCompat
import id.soewidiatmaka.gamelanjv.service.PermissionService
import id.soewidiatmaka.gamelanjv.service.RecordService
import java.io.File
import java.text.SimpleDateFormat
import java.util.*

class KendhangKalihActivity : AppCompatActivity(), View.OnTouchListener {
    private var volume = 1f
    private lateinit var sbVolume: SeekBar

    private var recordService : RecordService = RecordService(this)

    private var soundPool: SoundPool? = null
    private var tak: Int = 0
    private var dah: Int = 0
    private var tung: Int = 0
    private var tong: Int = 0
    private var ket: Int = 0
    lateinit var animationDraw : AnimationDrawable

    private var fbKalihDah : Float = 1F
    private var fbKalihTung : Float = 1F
    private var fbKalihTong : Float = 1F

    private var soundPoolClick: SoundPool? = null
    private var click: Int = 0
    private fun clickSound(){
        soundPoolClick?.play(click, 1f, 1f, 0, 0, 1f)
    }

    private fun backHome() {
        val intent = Intent(this, MainActivity::class.java)
        startActivity(intent)
        overridePendingTransition(R.anim.slide_in_left, R.anim.slide_out_right)
    }

    private fun stopRec(){
        val bRecord = findViewById<Button>(R.id.btn_record)
        val bStop = findViewById<Button>(R.id.btn_stop)

        recordService.stop()
        bRecord.isEnabled=true
        bStop.isEnabled=false
    }

    @SuppressLint("ClickableViewAccessibility")
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_kendhang_kalih)

        onBackPressedDispatcher.addCallback(this, onBackPressCallback)
        val sharePref = getSharedPreferences("myPref", Context.MODE_PRIVATE)
        fbKalihDah = sharePref.getFloat("rateKalihDah",1F)
        fbKalihTong = sharePref.getFloat("rateKalihTong",1F)
        fbKalihTung = sharePref.getFloat("rateKalihTung",1F)

        val instrumentView = findViewById<ConstraintLayout>(R.id.instrumentView)
        val animationScreen = findViewById<RelativeLayout>(R.id.animationScreen)
        val animationView = findViewById<ImageView>(R.id.animationView)
        animationDraw = animationView.drawable as AnimationDrawable

        soundPoolClick?.release()
        soundPoolClick = SoundPool.Builder()
            .build()
        click = soundPoolClick?.load(this, R.raw.click, 1)!!

        val kendangkalihTak = findViewById<ConstraintLayout>(R.id.kendangkalihTak)
        val kendangkalihTung = findViewById<ConstraintLayout>(R.id.kendangkalihTung)
        val kendangkalihTong = findViewById<ConstraintLayout>(R.id.kendangkalihTong)
        val kendangkalihDah = findViewById<ConstraintLayout>(R.id.kendangkalihDah)
        val kendangkalihKet = findViewById<ConstraintLayout>(R.id.kendangkalihKet)

        kendangkalihTak.setOnTouchListener(this)
        kendangkalihDah.setOnTouchListener(this)
        kendangkalihTung.setOnTouchListener(this)
        kendangkalihKet.setOnTouchListener(this)
        kendangkalihTong.setOnTouchListener(this)

        soundPool?.release()
        soundPool = SoundPool.Builder()
            .setMaxStreams(2)
            .build()
        tak = soundPool?.load(this,R.raw.tak,1)!!
        dah = soundPool?.load(this, R.raw.dah, 1)!!
        tung = soundPool?.load(this, R.raw.tung, 1)!!
        ket = soundPool?.load(this, R.raw.ket, 1)!!
        tong = soundPool?.load(this, R.raw.tong, 1)!!

        val totalTime = 1500
        object : CountDownTimer(totalTime.toLong(), 100) {
            override fun onTick(millisUntilFinished: Long) {
                animationDraw.start()
            }
            override fun onFinish() {
                animationScreen.visibility = View.GONE
                animationDraw.stop()
                instrumentView.visibility = View.VISIBLE
            }
        }.start()

        val bRecord = findViewById<Button>(R.id.btn_record)
        val bStop = findViewById<Button>(R.id.btn_stop)
        val bPlay = findViewById<Button>(R.id.btn_play)
        val tRicikan = findViewById<TextView>(R.id.tv_ricikan)

        bRecord.isEnabled = false
        bStop.isEnabled = false

        if (ActivityCompat.checkSelfPermission(
                this,
                Manifest.permission.RECORD_AUDIO
            ) != PackageManager.PERMISSION_GRANTED
        )
            ActivityCompat.requestPermissions(
                this, arrayOf(
                    Manifest.permission.RECORD_AUDIO,
                    Manifest.permission.WRITE_EXTERNAL_STORAGE,
                    Manifest.permission.READ_EXTERNAL_STORAGE
                ), 111
            )

        bRecord.isEnabled = PermissionService.showDialogPermission(this)

        val myDirectory = File(getExternalFilesDir(Environment.DIRECTORY_MUSIC), "GamelanJv")
        val nama = tRicikan.text.toString()
        if (!myDirectory.exists()) {
            myDirectory.mkdirs()
        }

        bRecord.setOnClickListener {
            val formatter = SimpleDateFormat("dd-MM HH-mm-ss", Locale.getDefault())
            val fileName = nama + " " + formatter.format(Date()) + ".m4a"
            val path: String = myDirectory.path.toString() + "/" + fileName

            recordService.record(path)
            bStop.isEnabled=true
            bRecord.isEnabled=false
        }
        bStop.setOnClickListener {
            stopRec()
        }
        bPlay.setOnClickListener {
            if (recordService.IsRecord()){
                stopRec()
            }
            clickSound()
            val posAct = 111
            val intent = Intent(this, FileManagerActivity::class.java)
            intent.putExtra("posAct", posAct)
            startActivity(intent)
        }

        window.decorView.setOnSystemUiVisibilityChangeListener { visibility ->
            if (visibility and View.SYSTEM_UI_FLAG_FULLSCREEN == 0) {
                window.decorView.apply {
                    systemUiVisibility = hideSystemBars()
                }

            }
        }

        findViewById<LinearLayout>(R.id.btn_home).setOnClickListener {
            if (recordService.IsRecord()){
                stopRec()
            }
            clickSound()
            backHome()
        }

        findViewById<LinearLayout>(R.id.btn_switch).setOnClickListener {
            if (recordService.IsRecord()){
                stopRec()
            }
            clickSound()
            val intent = Intent(this, KendhangCiblonActivity::class.java)
            startActivity(intent)
            overridePendingTransition(R.anim.slide_in_right, R.anim.slide_out_left)
        }

        sbVolume = findViewById(R.id.sbVolume)
        sbVolume.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener{
            override fun onProgressChanged(seekBar: SeekBar?, progress: Int, fromUser: Boolean) {
                if (fromUser){
                    volume = (progress.toDouble()/20).toFloat()
                }
            }

            override fun onStartTrackingTouch(seekBar: SeekBar?) {
            }

            override fun onStopTrackingTouch(seekBar: SeekBar?) {
            }

        })

    }

    private val onBackPressCallback = object : OnBackPressedCallback(true) {
        override fun handleOnBackPressed() {
            onBackPress()
        }

    }
    private fun onBackPress() {
        if (recordService.IsRecord()){
            stopRec()
        }
        clickSound()
        backHome()
    }
    override fun onWindowFocusChanged(hasFocus: Boolean) {
        super.onWindowFocusChanged(hasFocus)
        if (hasFocus){
            window.decorView.apply {
                systemUiVisibility = hideSystemBars()
            }

        }
    }

    private fun hideSystemBars(): Int {
        return View.SYSTEM_UI_FLAG_LAYOUT_STABLE or View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY or View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN or View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION or View.SYSTEM_UI_FLAG_HIDE_NAVIGATION or View.SYSTEM_UI_FLAG_FULLSCREEN
    }


    @SuppressLint("ClickableViewAccessibility")
    override fun onTouch(v: View?, event: MotionEvent?): Boolean {
        val action = event!!.action
        if (action == MotionEvent.ACTION_DOWN||action == MotionEvent.ACTION_POINTER_DOWN){
            if (v != null) {
                when (v.id) {
                    R.id.kendangkalihTak -> soundPool?.play(tak, volume, volume, 0, 0, 1f)
                    R.id.kendangkalihDah -> soundPool?.play(dah, volume, volume, 0, 0, fbKalihDah)
                    R.id.kendangkalihTung -> soundPool?.play(tung, volume, volume, 0, 0, fbKalihTung)
                    R.id.kendangkalihTong -> soundPool?.play(tong, volume, volume, 0, 0, fbKalihTong)
                    R.id.kendangkalihKet -> soundPool?.play(ket, (0.6*volume).toFloat(), (0.6*volume).toFloat(), 0, 0, fbKalihTung)
                }
            }
        }
        return true

    }
}